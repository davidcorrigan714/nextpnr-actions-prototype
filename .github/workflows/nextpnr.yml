name: nextpnr-ci

on:
  workflow_dispatch:
  push:
    paths: '.github/workflows/nextpnr.yml'
    
jobs:
  next-pnr:
    name: prjtrellis
    #runs-on: self-hosted
    runs-on: windows-2019
    timeout-minutes: 240

    steps:
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1
  
      # nextpnr fails to build with Python 3.7.9, not entirely sure why,
      # but there's weird errors about 'copysign' in the VS header files.
      # Might be conflicting macro definitions for copysign.
      # Should be able to remove this if GitHub upgrades their images
      - name: Upgrade Python
        run: |
          $WebClient = New-Object System.Net.WebClient
          $WebClient.DownloadFile("https://www.python.org/ftp/python/3.9.1/python-3.9.1-amd64.exe",(Get-Location).tostring()+"\python3.exe")
          cmd /c start /wait python3.exe /quiet TargetDir=$Env:GITHUB_WORKSPACE\python Shortcuts=0 Include_launcher=1 PrependPath=1
          cmd /c mklink $Env:GITHUB_WORKSPACE\python\python3.exe $Env:GITHUB_WORKSPACE\python\python.exe
          dir $Env:GITHUB_WORKSPACE\python
          
          $PYTHON_EXE = $Env:GITHUB_WORKSPACE + "\python\python.exe"
          echo "PYTHON_EXE=$PYTHON_EXE" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
      # The python version with Boost should match what's on the systems so we need to download
      # and build instead of using GitHub's prebuilt cache
      - name: Download & Build Boost
        run: |
          $Env:PATH += ";" + $Env:GITHUB_WORKSPACE + "\python\"
          choco install 7zip
          $WebClient = New-Object System.Net.WebClient
          $WebClient.DownloadFile("https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.zip",(Get-Location).tostring()+"\boost_1_73_0.7z")
          set-alias sz "$env:ProgramFiles\7-Zip\7z.exe"
          sz x ".\boost_1_73_0.7z"
          $vs_env = (C:\ProgramData\Chocolatey\bin\vswhere.exe -products * -requires Microsoft.Component.MSBuild -property installationPath -latest)+"\VC\Auxiliary\Build\vcvarsamd64_x86.bat"
          & {
          .$vs_env
          cd boost_1_73_0
          .\bootstrap.bat
          # Python wants the shared versions so lets do those
          # CMake seems to want to find both when creating project files even if we only use one
          .\b2 link=shared runtime-link=shared variant=release
          .\b2 link=shared runtime-link=shared variant=debug
          }

          $VS_Root = (C:\ProgramData\Chocolatey\bin\vswhere.exe -products * -requires Microsoft.Component.MSBuild -property installationPath -latest)+"\VC\Auxiliary\VS"

          Copy-Item -Recurse "boost" -Destination "$VS_Root\include"
          Copy-Item -Recurse "stage\lib\*" -Destination "$VS_Root\lib\x64"

          echo "BOOST_LIBRARYDIR=$VS_Root\lib\x64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "BOOST_INCLUDEDIR=$VS_Root\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Checkout prjtrellis
        uses: actions/checkout@v2
        with:
          repository: YosysHQ/prjtrellis
          path: prjtrellis
          submodules: recursive
          fetch-depth: 0

      - name: Build prjtrellis
        working-directory: prjtrellis\libtrellis\
        run: |
          echo $Env:PYTHON_EXE
          $Env:PATH += ";" + $Env:GITHUB_WORKSPACE + "\python\"
          cmake --debug-find -DCMAKE_CXX_FLAGS='/D "BOOST_ALL_DYN_LINK"' .
          msbuild /t:Build /p:Configuration=Release libtrellis.sln
    
      
      - name: Install prjtrellis
        run: |
          mkdir releaseDir
          cmake -DCMAKE_INSTALL_PREFIX="releaseDir" -DBUILD_TYPE=Release -P .\prjtrellis\libtrellis\cmake_install.cmake
          dir releaseDir
          dir $Env:GITHUB_WORKSPACE\prjtrellis\libtrellis\Release
      - name: Checkout nextpnr
        uses: actions/checkout@v2
        with:
          repository: YosysHQ/nextpnr
          path: nextpnr

      - name: Build nextpnr
        working-directory: nextpnr
        timeout-minutes: 240
        run: |
          $env:Path += ";"+$Env:BOOST_ROOT_1_72_0+"\lib"
          $Env:PATH += ";" + $Env:GITHUB_WORKSPACE + "\python\"
          vcpkg.exe install qt5-base:x64-windows eigen3:x64-windows
          vcpkg.exe integrate install
          $Env:PYTHONPATH = "$Env:GITHUB_WORKSPACE\prjtrellis\util\common;$Env:GITHUB_WORKSPACE\prjtrellis\timing\util"
          cmake . --debug-find -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_CXX_FLAGS='/D "BOOST_ALL_DYN_LINK" /D "WIN32" /EHsc' -DARCH=ecp5 -DCMAKE_PREFIX_PATH="$Env:GITHUB_WORKSPACE\prjtrellis\libtrellis\Release"
          msbuild /t:Build /p:Configuration=Release /p:Platform=x64 nextpnr.sln
      
      - name: Install nextpnr
        run: |
          cmake -DCMAKE_INSTALL_PREFIX="releaseDir" -DBUILD_TYPE=Release -P .\nextpnr\cmake_install.cmake 
          dir releasedir
